{"ast":null,"code":"import _objectSpread from \"/Users/anshluthra/Downloads/covidrepo-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { INDIA_ISO_SUFFIX, ISO_DATE_REGEX, LOCALE_SHORTHANDS, NAN_STATISTICS, PER_MILLION_OPTIONS, STATISTIC_OPTIONS, TESTED_LOOKBACK_DAYS } from '../constants';\nimport { differenceInDays, format, formatDistance, formatISO, subDays } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport i18n from 'i18next';\nvar locale = null;\nvar numberFormatter = new Intl.NumberFormat('en-IN', {\n  maximumFractionDigits: 1\n});\n\nvar getLocale = function getLocale() {\n  import('date-fns/locale/').then(function (localePackage) {\n    locale = localePackage[LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]];\n  });\n};\n\nexport var isDevelopmentOrTest = function isDevelopmentOrTest() {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') return true;\n  return false;\n};\nexport var getIndiaDate = function getIndiaDate() {\n  return utcToZonedTime(new Date(), 'Asia/Kolkata');\n};\nexport var getIndiaDateISO = function getIndiaDateISO() {\n  return formatISO(getIndiaDate(), {\n    representation: 'date'\n  });\n};\nexport var getIndiaDateYesterday = function getIndiaDateYesterday() {\n  return subDays(getIndiaDate(), 1);\n};\nexport var getIndiaDateYesterdayISO = function getIndiaDateYesterdayISO() {\n  return formatISO(getIndiaDateYesterday(), {\n    representation: 'date'\n  });\n};\nexport var formatLastUpdated = function formatLastUpdated(unformattedDate) {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale\n  });\n};\nexport var parseIndiaDate = function parseIndiaDate(isoDate) {\n  if (!isoDate) return getIndiaDate();\n  if (isoDate.match(ISO_DATE_REGEX)) isoDate += INDIA_ISO_SUFFIX;\n  return utcToZonedTime(new Date(isoDate), 'Asia/Kolkata');\n};\nexport var formatDate = function formatDate(unformattedDate, formatString) {\n  if (!unformattedDate) return '';\n  if (typeof unformattedDate === 'string' && unformattedDate.match(ISO_DATE_REGEX)) unformattedDate += INDIA_ISO_SUFFIX;\n  var date = utcToZonedTime(new Date(unformattedDate), 'Asia/Kolkata');\n  return format(date, formatString, {\n    locale: locale\n  });\n};\nexport var abbreviateNumber = function abbreviateNumber(number) {\n  if (Math.abs(number) < 1e3) return numberFormatter.format(number);else if (Math.abs(number) >= 1e3 && Math.abs(number) < 1e5) return numberFormatter.format(number / 1e3) + 'K';else if (Math.abs(number) >= 1e5 && Math.abs(number) < 1e7) return numberFormatter.format(number / 1e5) + 'L';else if (Math.abs(number) >= 1e7 && Math.abs(number) < 1e10) return numberFormatter.format(number / 1e7) + 'Cr';else if (Math.abs(number) >= 1e10 && Math.abs(number) < 1e14) return numberFormatter.format(number / 1e10) + 'K Cr';else if (Math.abs(number) >= 1e14) return numberFormatter.format(number / 1e14) + 'L Cr';\n};\nexport var formatNumber = function formatNumber(value, option, statistic) {\n  if (statistic && NAN_STATISTICS.includes(statistic) && value === 0) value = NaN;\n  if (isNaN(value)) return '-';else if (option === 'short') {\n    return abbreviateNumber(value);\n  } else if (option === 'int') {\n    value = Math.floor(value);\n  }\n  return numberFormatter.format(value) + (option === '%' ? '%' : '');\n};\nexport var capitalize = function capitalize(s) {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\nexport var toTitleCase = function toTitleCase(str) {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\nexport var getStatistic = function getStatistic(data, type, statistic) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$perMillion = _ref.perMillion,\n      perMillion = _ref$perMillion === void 0 ? false : _ref$perMillion,\n      _ref$movingAverage = _ref.movingAverage,\n      movingAverage = _ref$movingAverage === void 0 ? false : _ref$movingAverage;\n\n  // TODO: Replace delta with daily to remove ambiguity\n  //       Or add another type for daily/delta\n  var _STATISTIC_OPTIONS$st = _objectSpread({}, STATISTIC_OPTIONS[statistic], perMillion && !STATISTIC_OPTIONS[statistic]?.normalizeByKey && PER_MILLION_OPTIONS),\n      key = _STATISTIC_OPTIONS$st.key,\n      normalizeBy = _STATISTIC_OPTIONS$st.normalizeByKey;\n\n  var multiplyFactor = STATISTIC_OPTIONS[statistic]?.multiplyFactor || 1;\n  multiplyFactor *= !STATISTIC_OPTIONS[statistic]?.normalizeByKey && perMillion && PER_MILLION_OPTIONS?.multiplyFactor || 1;\n\n  if (type === 'delta' && movingAverage) {\n    type = 'delta7';\n    multiplyFactor *= !STATISTIC_OPTIONS[statistic]?.normalizeByKey && 1 / 7 || 1;\n  }\n\n  var count;\n\n  if (key === 'population') {\n    count = type === 'total' ? data?.meta?.population : 0;\n  } else if (key === 'tested') {\n    count = data?.[type]?.tested;\n  } else if (key === 'active') {\n    var confirmed = data?.[type]?.confirmed || 0;\n    var deceased = data?.[type]?.deceased || 0;\n    var recovered = data?.[type]?.recovered || 0;\n    var other = data?.[type]?.other || 0;\n    count = confirmed - deceased - recovered - other;\n  } else {\n    count = data?.[type]?.[key];\n  }\n\n  if (normalizeBy) {\n    count /= getStatistic(data, normalizeBy === 'population' ? 'total' : type, normalizeBy);\n  }\n\n  return multiplyFactor * (isFinite(count) && count || 0);\n};\nexport var getTableStatistic = function getTableStatistic(data, statistic, args, lastUpdatedTT) {\n  var expired = (STATISTIC_OPTIONS[statistic].key === 'tested' || STATISTIC_OPTIONS[statistic].normalizeByKey === 'tested') && differenceInDays(lastUpdatedTT, parseIndiaDate(data.meta?.tested?.['last_updated'])) > TESTED_LOOKBACK_DAYS;\n  var total = !expired ? getStatistic(data, 'total', statistic, args) : 0;\n  var delta = !expired ? getStatistic(data, 'delta', statistic, args) : 0;\n  return {\n    total: total,\n    delta: delta\n  };\n};\nexport var fetcher = function fetcher(url) {\n  return fetch(url).then(function (response) {\n    return response.json();\n  });\n};","map":{"version":3,"sources":["/Users/anshluthra/Downloads/covidrepo-main/src/utils/commonFunctions.js"],"names":["INDIA_ISO_SUFFIX","ISO_DATE_REGEX","LOCALE_SHORTHANDS","NAN_STATISTICS","PER_MILLION_OPTIONS","STATISTIC_OPTIONS","TESTED_LOOKBACK_DAYS","differenceInDays","format","formatDistance","formatISO","subDays","utcToZonedTime","i18n","locale","numberFormatter","Intl","NumberFormat","maximumFractionDigits","getLocale","then","localePackage","language","window","localStorage","i18nextLng","isDevelopmentOrTest","process","env","NODE_ENV","getIndiaDate","Date","getIndiaDateISO","representation","getIndiaDateYesterday","getIndiaDateYesterdayISO","formatLastUpdated","unformattedDate","parseIndiaDate","isoDate","match","formatDate","formatString","date","abbreviateNumber","number","Math","abs","formatNumber","value","option","statistic","includes","NaN","isNaN","floor","capitalize","s","charAt","toUpperCase","slice","toTitleCase","str","replace","txt","substr","toLowerCase","getStatistic","data","type","perMillion","movingAverage","normalizeByKey","key","normalizeBy","multiplyFactor","count","meta","population","tested","confirmed","deceased","recovered","other","isFinite","getTableStatistic","args","lastUpdatedTT","expired","total","delta","fetcher","url","fetch","response","json"],"mappings":"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","sourcesContent":["import {\n  INDIA_ISO_SUFFIX,\n  ISO_DATE_REGEX,\n  LOCALE_SHORTHANDS,\n  NAN_STATISTICS,\n  PER_MILLION_OPTIONS,\n  STATISTIC_OPTIONS,\n  TESTED_LOOKBACK_DAYS,\n} from '../constants';\n\nimport {\n  differenceInDays,\n  format,\n  formatDistance,\n  formatISO,\n  subDays,\n} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport i18n from 'i18next';\n\nlet locale = null;\nconst numberFormatter = new Intl.NumberFormat('en-IN', {\n  maximumFractionDigits: 1,\n});\n\nconst getLocale = () => {\n  import('date-fns/locale/').then((localePackage) => {\n    locale =\n      localePackage[\n        LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]\n      ];\n  });\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')\n    return true;\n  return false;\n};\n\nexport const getIndiaDate = () => {\n  return utcToZonedTime(new Date(), 'Asia/Kolkata');\n};\n\nexport const getIndiaDateISO = () => {\n  return formatISO(getIndiaDate(), {representation: 'date'});\n};\n\nexport const getIndiaDateYesterday = () => {\n  return subDays(getIndiaDate(), 1);\n};\n\nexport const getIndiaDateYesterdayISO = () => {\n  return formatISO(getIndiaDateYesterday(), {representation: 'date'});\n};\n\nexport const formatLastUpdated = (unformattedDate) => {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale,\n  });\n};\n\nexport const parseIndiaDate = (isoDate) => {\n  if (!isoDate) return getIndiaDate();\n  if (isoDate.match(ISO_DATE_REGEX)) isoDate += INDIA_ISO_SUFFIX;\n  return utcToZonedTime(new Date(isoDate), 'Asia/Kolkata');\n};\n\nexport const formatDate = (unformattedDate, formatString) => {\n  if (!unformattedDate) return '';\n  if (\n    typeof unformattedDate === 'string' &&\n    unformattedDate.match(ISO_DATE_REGEX)\n  )\n    unformattedDate += INDIA_ISO_SUFFIX;\n  const date = utcToZonedTime(new Date(unformattedDate), 'Asia/Kolkata');\n  return format(date, formatString, {\n    locale: locale,\n  });\n};\n\nexport const abbreviateNumber = (number) => {\n  if (Math.abs(number) < 1e3) return numberFormatter.format(number);\n  else if (Math.abs(number) >= 1e3 && Math.abs(number) < 1e5)\n    return numberFormatter.format(number / 1e3) + 'K';\n  else if (Math.abs(number) >= 1e5 && Math.abs(number) < 1e7)\n    return numberFormatter.format(number / 1e5) + 'L';\n  else if (Math.abs(number) >= 1e7 && Math.abs(number) < 1e10)\n    return numberFormatter.format(number / 1e7) + 'Cr';\n  else if (Math.abs(number) >= 1e10 && Math.abs(number) < 1e14)\n    return numberFormatter.format(number / 1e10) + 'K Cr';\n  else if (Math.abs(number) >= 1e14)\n    return numberFormatter.format(number / 1e14) + 'L Cr';\n};\n\nexport const formatNumber = (value, option, statistic) => {\n  if (statistic && NAN_STATISTICS.includes(statistic) && value === 0)\n    value = NaN;\n\n  if (isNaN(value)) return '-';\n  else if (option === 'short') {\n    return abbreviateNumber(value);\n  } else if (option === 'int') {\n    value = Math.floor(value);\n  }\n  return numberFormatter.format(value) + (option === '%' ? '%' : '');\n};\n\nexport const capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexport const getStatistic = (\n  data,\n  type,\n  statistic,\n  {perMillion = false, movingAverage = false} = {}\n) => {\n  // TODO: Replace delta with daily to remove ambiguity\n  //       Or add another type for daily/delta\n  const {key, normalizeByKey: normalizeBy} = {\n    ...STATISTIC_OPTIONS[statistic],\n    ...(perMillion &&\n      !STATISTIC_OPTIONS[statistic]?.normalizeByKey &&\n      PER_MILLION_OPTIONS),\n  };\n\n  let multiplyFactor = STATISTIC_OPTIONS[statistic]?.multiplyFactor || 1;\n  multiplyFactor *=\n    (!STATISTIC_OPTIONS[statistic]?.normalizeByKey &&\n      perMillion &&\n      PER_MILLION_OPTIONS?.multiplyFactor) ||\n    1;\n\n  if (type === 'delta' && movingAverage) {\n    type = 'delta7';\n    multiplyFactor *=\n      (!STATISTIC_OPTIONS[statistic]?.normalizeByKey && 1 / 7) || 1;\n  }\n\n  let count;\n  if (key === 'population') {\n    count = type === 'total' ? data?.meta?.population : 0;\n  } else if (key === 'tested') {\n    count = data?.[type]?.tested;\n  } else if (key === 'active') {\n    const confirmed = data?.[type]?.confirmed || 0;\n    const deceased = data?.[type]?.deceased || 0;\n    const recovered = data?.[type]?.recovered || 0;\n    const other = data?.[type]?.other || 0;\n    count = confirmed - deceased - recovered - other;\n  } else {\n    count = data?.[type]?.[key];\n  }\n\n  if (normalizeBy) {\n    count /= getStatistic(\n      data,\n      normalizeBy === 'population' ? 'total' : type,\n      normalizeBy\n    );\n  }\n\n  return multiplyFactor * ((isFinite(count) && count) || 0);\n};\n\nexport const getTableStatistic = (data, statistic, args, lastUpdatedTT) => {\n  const expired =\n    (STATISTIC_OPTIONS[statistic].key === 'tested' ||\n      STATISTIC_OPTIONS[statistic].normalizeByKey === 'tested') &&\n    differenceInDays(\n      lastUpdatedTT,\n      parseIndiaDate(data.meta?.tested?.['last_updated'])\n    ) > TESTED_LOOKBACK_DAYS;\n\n  const total = !expired ? getStatistic(data, 'total', statistic, args) : 0;\n  const delta = !expired ? getStatistic(data, 'delta', statistic, args) : 0;\n  return {total, delta};\n};\n\nexport const fetcher = (url) => {\n  return fetch(url).then((response) => {\n    return response.json();\n  });\n};\n"]},"metadata":{},"sourceType":"module"}