"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const merge_1 = __importDefault(require("merge"));
const cosmiconfig_1 = require("cosmiconfig");
const fs_1 = require("fs");
const js_yaml_1 = require("js-yaml");
const defaultSearchPlaces = (moduleName) => [
    'package.json',
    `.${moduleName}rc`,
    `.${moduleName}.json`,
    `.${moduleName}.yaml`,
    `.${moduleName}.yml`,
    `${moduleName}.config.js`,
];
function loadDefaults() {
    // @ts-ignore
    return js_yaml_1.safeLoad(fs_1.readFileSync(require.resolve('../config/default.yml'), {
        encoding: 'utf8',
    }));
}
exports.loadDefaults = loadDefaults;
var CONFIG_TYPE;
(function (CONFIG_TYPE) {
    CONFIG_TYPE["SASS_LINT"] = "sass_lint";
    CONFIG_TYPE["SASS_LINT_AUTO_FIX"] = "sass_lint_auto_fix";
})(CONFIG_TYPE = exports.CONFIG_TYPE || (exports.CONFIG_TYPE = {}));
function getConfig(moduleName, filepath) {
    const explorer = cosmiconfig_1.cosmiconfigSync(moduleName, {
        searchPlaces: defaultSearchPlaces(moduleName),
    });
    const resolvedConfig = filepath ? explorer.load(filepath) : explorer.search();
    if (resolvedConfig) {
        return resolvedConfig.config;
    }
    return {};
}
exports.getConfig = getConfig;
exports.mergeConfig = (baseConfig, extendedConfig) => merge_1.default.recursive(true, baseConfig, extendedConfig);
