#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("./helpers");
const commander_1 = __importDefault(require("commander"));
const sass_lint_auto_fix_1 = require("./sass-lint-auto-fix");
const services_1 = require("./services");
const fs_1 = __importDefault(require("fs"));
const process_1 = __importDefault(require("process"));
const { version } = require('../package.json');
(() => {
    commander_1.default
        .version(version)
        .usage('"<pattern>" [options]')
        .option('-c, --config <path>', 'custom config path (e.g /path/to/.sass-lint-auto-fix.yml)')
        .option('--config-sass-lint <path>', 'custom sass lint config path (e.g /path/to/.sass-lint.yml')
        .option('-s, --silent', 'runs in silent mode')
        .option('-d, --debug', 'runs in debug mode')
        .parse(process_1.default.argv);
    const logger = helpers_1.createLogger({
        silentEnabled: commander_1.default.silent,
        debugEnabled: commander_1.default.debug,
    });
    let baseOptions = helpers_1.loadDefaults();
    if (commander_1.default.config) {
        // TOOD: Handle different configuration types
        const customConfiguration = helpers_1.getConfig(helpers_1.CONFIG_TYPE.SASS_LINT_AUTO_FIX, commander_1.default.config);
        baseOptions = helpers_1.mergeConfig(baseOptions, customConfiguration);
    }
    const sassLintConfig = helpers_1.getConfig(helpers_1.CONFIG_TYPE.SASS_LINT, commander_1.default.configSassLint);
    process_1.default.on('unhandledRejection', (error) => {
        if (!baseOptions.options.optOut) {
            services_1.SentryService.reportIncident(error);
        }
        logger.error(error);
        process_1.default.exitCode = 1;
    });
    process_1.default.on('uncaughtException', (error) => {
        if (!baseOptions.options.optOut) {
            services_1.SentryService.reportIncident(error);
        }
        logger.error(error);
        process_1.default.exitCode = 1;
    });
    const pattern = commander_1.default.args[0];
    baseOptions.files.include = pattern || baseOptions.files.include;
    const sassLintAutoFix = sass_lint_auto_fix_1.autoFixSassFactory(Object.assign({ logger }, baseOptions));
    // TODO: Add sass-lint config, right now will merge with default rule set
    for (const { filename, ast } of sassLintAutoFix(sassLintConfig)) {
        fs_1.default.writeFileSync(filename, ast.toString());
        logger.verbose('write', `Writing resolved tree to ${filename}`);
    }
})();
